<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\Common.Pre.props" />
  <PropertyGroup Label="Globals">
    <VCProjectVersion>17.0</VCProjectVersion>
    <Keyword>Win32Proj</Keyword>
    <ProjectGuid>{456ccae4-2c51-4cf2-8d3a-1efce8c41a2d}</ProjectGuid>
    <WindowsTargetPlatformVersion>10.0.26100.0</WindowsTargetPlatformVersion>
    <IntDir>$(SolutionDir)\obj\$(Platform)\$(Configuration)\$(MSBuildProjectName)\</IntDir>
    <OutDir>$(SolutionDir)\bin\$(Platform)\$(Configuration)\</OutDir>
    <!-- 快速检查会忽略新增的 conanfile.txt，不过没关系，可以手动重新生成 -->
    <!-- <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck> -->
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup>
    <ConfigurationType>Utility</ConfigurationType>
  </PropertyGroup>
  <ItemGroup>
    <None Include="clang-cl.profile" />
    <None Include="msvc.profile" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <UsingTask TaskName="FindConanFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <SrcDir Required="true" />
      <IntDir Required="true" />
      <ConanFile ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs"><![CDATA[
List<ITaskItem> conanFiles = new List<ITaskItem>();

// 搜索 conanfile.txt
foreach (string projectDir in Directory.GetDirectories(SrcDir)) {
    string conanfilePath = Path.Combine(projectDir, "conanfile.txt");
    if (!File.Exists(conanfilePath)) {
        continue;
    }
    
    string projectName = projectDir.Substring(projectDir.LastIndexOf('\\') + 1);
    // 虽然会生成很多 props，但既然我们只导入 conandeps.props，把它作为输出就够了
    string outputConandepsProps = Path.GetFullPath($"{IntDir}\\{projectName}\\conandeps.props");
    conanFiles.Add(new TaskItem(Path.GetFullPath(conanfilePath), new Dictionary<string, string> {
        { "ProjectName", projectName },
        { "OutputConandepsProps", outputConandepsProps }
    }));
}

ConanFile = conanFiles.ToArray();
      ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="BuildConanDeps" BeforeTargets="Build">
    <!-- 生成的 props 文件放在 $(IntDir) 里，便于清理 -->
    <FindConanFiles SrcDir="$(ProjectDir)\\.." IntDir="$(IntDir)">
      <Output TaskParameter="ConanFile" ItemName="ConanFile" />
    </FindConanFiles>
    <!-- 检测编译选项是否改变 -->
    <PropertyGroup>
      <BuildOptions Condition="$(UseClangCL)">ClangCL</BuildOptions>
      <BuildOptions Condition="$(UseClangCL) And $(UseNativeMicroArch)">$(BuildOptions);UseNativeMicroArch</BuildOptions>
      <BuildOptions Condition="!$(UseClangCL)">MSVC</BuildOptions>
      <LastBuildOptionsFile>$(IntDir)\\last_build_options.txt</LastBuildOptionsFile>
    </PropertyGroup>
    <ReadLinesFromFile File="$(LastBuildOptionsFile)">
      <Output TaskParameter="Lines" PropertyName="LastBuildOptions" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <BuildOptionsChanged Condition="'$(BuildOptions)' == '$(LastBuildOptions)'">false</BuildOptionsChanged>
      <BuildOptionsChanged Condition="'$(BuildOptions)' != '$(LastBuildOptions)'">true</BuildOptionsChanged>
    </PropertyGroup>
    <WriteLinesToFile Condition="$(BuildOptionsChanged)" File="$(LastBuildOptionsFile)" Lines="$(BuildOptions)" Overwrite="true" />
    <!-- 检测 profile 是否已被更改 -->
    <PropertyGroup>
      <ProfileName Condition="$(UseClangCL)">clang-cl.profile</ProfileName>
      <ProfileName Condition="!$(UseClangCL)">msvc.profile</ProfileName>
    </PropertyGroup>
    <ItemGroup>
      <!-- 所有 props 都视为 profile 的输出 -->
      <ProfileFile Include="$(ProfileName)">
        <OutputConandepsProps>@(ConanFile->'%(OutputConandepsProps)')</OutputConandepsProps>
      </ProfileFile>
    </ItemGroup>
    <GetOutOfDateItems Sources="@(ProfileFile)" OutputsMetadataName="OutputConandepsProps" TLogDirectory="$(TLogLocation)" TLogNamePrefix="$(MSBuildProjectName)-Profile" TrackFileAccess="$(TrackFileAccess)">
      <Output TaskParameter="OutOfDateSources" ItemName="OutOfDateProfile" />
    </GetOutOfDateItems>
    <!-- 检测每个 conanfile 是否已被更改 -->
    <GetOutOfDateItems Sources="@(ConanFile)" OutputsMetadataName="OutputConandepsProps" TLogDirectory="$(TLogLocation)" TLogNamePrefix="$(MSBuildProjectName)-ConanFile" TrackFileAccess="$(TrackFileAccess)">
      <Output TaskParameter="OutOfDateSources" ItemName="OutOfDateConanFile" />
    </GetOutOfDateItems>
    <!-- 编译选项或 profile 改变则所有 conanfile 都需要重新处理，否则只处理已更改的 conanfile -->
    <ItemGroup Condition="!$(BuildOptionsChanged) And '@(OutOfDateProfile)' == ''">
      <ConanFile Remove="@(ConanFile)" />
      <ConanFile Include="@(OutOfDateConanFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ConanInstallArch Condition="'$(Platform)' == 'x64'">x86_64</ConanInstallArch>
      <ConanInstallArch Condition="'$(Platform)' == 'ARM64'">armv8</ConanInstallArch>
      <!-- 目前的依赖都不使用 RTTI -->
      <AdditionalFlags>'/GR-'</AdditionalFlags>
      <AdditionalFlags Condition="$(UseClangCL) And '$(Configuration)' == 'Release'">$(AdditionalFlags),'/clang:-flto'</AdditionalFlags>
      <AdditionalFlags Condition="$(UseClangCL) And '$(Platform)' == 'x64'">$(AdditionalFlags),'/clang:-mcx16'</AdditionalFlags>
      <AdditionalFlags Condition="$(UseClangCL) And $(UseNativeMicroArch)">$(AdditionalFlags),'/clang:-march=native'</AdditionalFlags>
      <AdditionalFlags Condition="!$(UseClangCL) And '$(Configuration)' == 'Release'">$(AdditionalFlags),'/GL'</AdditionalFlags>
      <FlagOptions Condition="'$(AdditionalFlags)' != ''">-c:a tools.build:cxxflags=[$(AdditionalFlags)] -c:a tools.build:cflags=[$(AdditionalFlags)]</FlagOptions>
    </PropertyGroup>
    <!-- 批量处理 ConanFile 中的元素 -->
    <Exec Condition="'@(ConanFile)' != ''" Command="conan install &quot;%(ConanFile.FullPath)&quot; -pr:a=$(ProfileName) --output-folder $(IntDir)%(ConanFile.ProjectName) -s build_type=$(Configuration) -s arch=$(ConanInstallArch) $(FlagOptions) --build=missing --update" />
  </Target>
</Project>